// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ENUMS FOR VALIDATION 
enum PIGGYBANK_TYPE {
  REGULAR
  EMERGENCY
}

enum PIGGYBANK_TOPUP_FREQUENCY {
  DAILY
  WEEKLY
  MONTHLY
}

enum TRANSACTION_TYPE {
  PROCESSING
  COMPLETED
  FAILED
  REVERSED
}

enum TRANSACTION_PURPOSE {
  SAVE
  TOPUP
  WITHDRAWAL
}

enum NOTIFICATION_TYPE {
  ALERT
  CONFIRMATION
  UPDATE 
  CRITICAL
}


enum SEX {
  FEMALE
  MALE
}


//  MODELS
model User {
  id    String @id @db.Uuid @default(uuid())
  email  String  
  username  String?
  password   String   
  isAdmin       Boolean @default(false)
  isSuperAdmin  Boolean @default(false)
  isVerified    Boolean @default(false)

  user          Profile?
  piggybanks    PiggyBanks[]
  transactions  Transactions[]
  notifications NotificationRecipients[]
  created_at    DateTime  @default(now())
  updated_at    DateTime?  @updatedAt 
}

model Profile {
  id  Int  @id  @default(autoincrement())
  userId   String @unique @db.Uuid
  user  User  @relation(fields: [userId], references: [id])
  lastname  String 
  firstname   String
  middlename  String?
  age         Int
  phone       Int   
  date_of_birth   DateTime 
  display_photo   String?
  country        String?
  state          String?
  city           String? 
  address        String?
  sex            SEX   @default(FEMALE)
  created_at    DateTime  @default(now())
  updated_at    DateTime?  @updatedAt 
}


model  PiggyBanks {
  id           String     @id @db.Uuid @default(uuid())
  name         String 
  type         PIGGYBANK_TYPE @default(REGULAR)
  target       Decimal    @default(0.0)
  current      Decimal    @default(0.0)
  deadline      DateTime  @default(now())
  isLocked      Boolean   @default(false)
  isAutoTopUP   Boolean   @default(false)
  isRecurring   Boolean   @default(false)
  frequencyTopUp  PIGGYBANK_TOPUP_FREQUENCY  @default(DAILY)
  penalty       Decimal?   @default(0.0)

  creatorId    String  @db.Uuid
  creator     User   @relation(fields: [creatorId], references: [id])
  transactions   Transactions[]
  created_at    DateTime  @default(now())
  updated_at    DateTime?  @updatedAt 
}


model Transactions {
  id       String @id @db.Uuid @default(uuid())
  amount     Decimal @default(0.0)
  currency         String       @default("USD")
  purpose    TRANSACTION_PURPOSE @default(SAVE)
  status      TRANSACTION_TYPE  @default(PROCESSING)
  comments      String?
  referenceId      String?       @unique
  fees             Decimal      @default(0.0)
  totalAmount      Decimal      @default(0.0)
  paymentMethod    String? 
  reversalReason   String?

  creatorId    String @db.Uuid
  creator      User  @relation(fields: [creatorId], references: [id])
  piggyBankId   String @db.Uuid
  piggyBank     PiggyBanks @relation(fields: [piggyBankId], references: [id])
  
  initiatedAt  DateTime @default(now())
  completedAt  DateTime?
  updatedAt    DateTime?  @updatedAt 
  createdAt    DateTime   @default(now())
}


model Notifications {
  id  Int   @id @default(autoincrement())
  recipients  NotificationRecipients[]
  message    String
  type       NOTIFICATION_TYPE @default(ALERT)
  created_at    DateTime  @default(now())
  updated_at    DateTime?  @updatedAt 
}


model NotificationRecipients {
  id            Int       @id @default(autoincrement())
  notification  Notifications @relation(fields: [notificationId], references: [id])
  notificationId Int
  user          User        @relation(fields: [userId], references: [id])
  userId        String  @db.Uuid
}